// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email      String     @unique
  password   String     @db.VarChar(255)
  firstName  String     @db.VarChar(50)
  lastName   String?    @db.VarChar(100)
  role       Role       @default(DEVELOPER)
  profile    Profile?
  tasks      Task[]
  createdAt  DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime   @updatedAt
  deleteAt   DateTime?
}

model Profile {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bio        String?    @db.Text
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String     @unique @db.Uuid
  skills     String[]
  speciality Specialty  @default(BACKEND)
  lead       Boolean    @default(false)
  createdAt  DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime   @updatedAt
}

model Customer {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  phone      String     @unique
  address    String?
  projects   Project[]
  createdAt  DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime   @updatedAt
  deleteAt   DateTime?
}

model Project {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  customer   Customer   @relation(fields: [customerId], references: [id])
  customerId String     @db.Uuid
  team       Int[]
  archivedAt DateTime?  @default(now())
  createdAt  DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime   @updatedAt
  deleteAt   DateTime?
}

model Task {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  user       User       @relation(fields: [userId], references: [id])
  userId     String     @db.Uuid
  status     TASK_STATS @default(UNASSIGNED)
  updatedAt  DateTime   @updatedAt
  createdAt  DateTime   @default(now())
}

model Poste {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  createdAt  DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime   @updatedAt
  deleteAt   DateTime?
}

enum Role {
  DEVELOPER
  PRODUCT_OWER
  SCRUM_MASTER
  TESTER
}

enum Specialty {
  BACKEND
  FULLSTACK
  FRONTEND
}

enum TASK_STATS {
  UNASSIGNED
  PENDING
  INPROGRESS
  TESTING
  COMPLETED
}
